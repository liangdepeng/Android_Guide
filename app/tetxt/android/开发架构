开发架构是前人总结出来的一套行之有效的开发模式，目的是达到高内聚，低耦合的效果，使得项目代码更健壮、易维护

Android中常见的架构模式有
MVC（Model-View-Controller）
MVP（Model-View-Presenter）
MVVM（Model-View-ViewModel）:

MVC模式将程序分成了三个部分：

Model模型层：业务相关的数据(如网络请求数据、本地数据库数据等)及其对数据的处理
View视图层：页面视图(通过XML布局编写视图层)，负责接收用户输入、发起数据请求及展示结果页面
Controller控制器层：M与V之间的桥梁，负责业务逻辑

MVC特点：

简单易用：View接收用户操作，通过Controller去处理业务逻辑，并通过Model去获取/更新数据，
然后Model层又将最新的数据传回View层进行页面展示。架构简单的另一面往往是对应的副作用：由于XML布局能力弱，
我们的View层的很多操作都是写在Activity/Fragment中，同时，Controller、Model层的代码也大都写在Activity/Fragment中，
这就会导致一个问题，当业务逻辑比较复杂时，Activity/Fragment中的代码量会很大，其违背了类单一职责，不利于后续扩展及维护。
尤其是后期你刚接手的项目，一个Activity/Fragment类中的代码动辄上千行代码，那感觉着实酸爽：当然，如果业务很简单，使用MVC模式还是一种不错的选择。

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

MVP各模块职责如下：

Model模型：业务相关的数据(如网络请求数据、本地数据库数据等)及其对数据的处理
View视图：页面视图(Activity/Fragment)，负责接收用户输入、发起数据请求及展示结果页面
Presenter：M与V之间的桥梁，负责业务逻辑

MVP特点：
View层接收用户操作，并通过持有的Presenter去处理业务逻辑，请求数据；接着Presenter层通过Model去获取数据，
然后Model又将最新的数据传回Presenter层，Presenter层又持有View层的引用，进而将数据传给View层进行展示。
MVP相比MVC的几处变化：

View层与Model层不再交互，而是通过Presenter去进行联系
本质上MVP是面向接口编程，Model/View/Presenter每层的职责分工明确，当业务复杂时，整个流程逻辑也是很清晰的

当然，MVP也不是十全十美的，MVP本身也存在以下问题：

View层会抽象成IView接口，并在IView中声明一些列View相关的方法；同样的，Presenter会被抽象成IPresenter接口及其一些列方法，
每当实现一个功能时，都需要编写多个接口及其对应的方法，实现起来相对比较繁琐，而且每次有改动时，对应的接口方法也基本都会再去改动。
View层与Presenter层相互持有，当View层关闭时，由于Presenter层不是生命周期感知的，可能会导致内存泄漏甚至是崩溃。

ps：如果你的项目中使用了RxJava，可以使用 AutoDispose 自动解绑。

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

MVVM各职责如下：

Model模型：业务相关的数据(如网络请求数据、本地数据库数据等)及其对数据的处理
View视图：页面视图(Activity/Fragment)，负责接收用户输入、发起数据请求及展示结果页面
ViewModel：M与V之间的桥梁，负责业务逻辑

MVVM特点：

View层接收用户操作，并通过持有的ViewModel去处理业务逻辑，请求数据；
ViewModel层通过Model去获取数据，然后Model又将最新的数据传回ViewModel层，到这里，ViewModel与Presenter所做的事基本是一样的。
但是ViewModel不会也不能持有View层的引用，而是View层会通过观察者模式监听ViewModel层的数据变化，当有新数据时，View层能自动收到新数据并刷新界面。

UI驱动 vs 数据驱动
MVP中，Presenter中需要持有View层的引用，当数据变化时，需要主动调用View层对应的方法将数据传过去并进行UI刷新，这种可以认为是UI驱动；
而MVVM中，ViewModel并不会持有View层的引用，View层会监听数据变化，当ViewModel中有数据更新时，View层能直接拿到新数据并完成UI更新，
这种可以认为是数据驱动，显然，MVVM相比于MVP来说更加解耦。


