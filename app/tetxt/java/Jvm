1、JVM定义
JVM（虚拟机）：指以软件的方式模拟具有完整硬件系统功能、运行在一个完全隔离环境中的计算机系统，是物理机的软件实现。常见虚拟机有VMWare、VirtualBox、Java Virtual Machine…
Java虚拟机阵营：Sun HotSpot VM、BEA JRockit VM（JDK1.8合并）…
Java虚拟机是采用虚拟化技术，隔离出一块独立的子操作系统，使Java软件不受任何影响在虚拟机内进行执行。
JVM由三个主要的子系统构成：

类加载子系统：装载具有适合名称的类或接口
运行时数据区（内存结构）：包含方法区、Java堆、Java栈、本地方法栈、指令计数器及其他隐含寄存器
执行引擎：负责执行包含在已装载的类或接口中的指令

2、JVM实现了Java平台的无关性
Java是一种技术，由四个方面组成：Java编程语言、Java类文件格式、Java虚拟机和Java应用程序接口（Java API）
开发人员编写Java代码，并将Java源代码文件（.java文件）通过Java编译器进行编译后形成java字节码文件（.class文件），
通过类加载子系统加载到运行时数据区（内存空间），再通过JVM执行引擎进行执行。运行期环境称为Java平台。
Java平台由Java虚拟机和Java应用程序接口搭建，Java语言是进入这个平台的通道，用Java语言编写的Java源文件可以运行在这个平台上。

二、类加载子系统
（1）什么是类的加载
类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在堆区创建一个java.lang.Class对象，
用来封装类在方法区内的数据结构。类的加载的最终产品是位于堆区中的Class对象，Class对象封装了类在方法区内的数据结构，
并且向Java程序员提供了访问方法区内的数据结构的接口。

（2）类的生命周期
 类的生命周期包括加载、连接、初始化、使用和卸载：

 加载，查找并加载类的二进制数据，在Java堆中也创建一个java.lang.Class类的对象
 连接，连接又包含三块内容：验证、准备、初始化。
 --->1）验证，文件格式、元数据、字节码、符号引用验证；
 --->2）准备，为类的静态变量分配内存，并将其初始化为默认值；
 --->3）解析，把类中的符号引用转换为直接引用
 初始化，为类的静态变量赋予正确的初始值
 使用，new出对象程序中使用
 卸载，执行垃圾回收
（3）类加载器
---启动类加载器：Bootstrap ClassLoader，负责加载存放在JDK\jre\lib(JDK代表JDK的安装目录，下同)下，或被-Xbootclasspath参数指定的路径中的，并且能被虚拟机识别的类库
---扩展类加载器：Extension ClassLoader，该加载器由sun.misc.Launcher$ExtClassLoader实现，它负责加载DK\jre\lib\ext目录中，
或者由java.ext.dirs系统变量指定的路径中的所有类库（如javax.*开头的类），开发者可以直接使用扩展类加载器。
---应用程序类加载器：Application ClassLoader，该类加载器由sun.misc.Launcher$AppClassLoader来实现，它负责加载用户类路径（ClassPath）所指定的类，开发者可以直接使用该类加载器

三、JVM内存管理
（1）JVM内存结构（运行时数据区）
方法区和堆是所有线程共享的内存区域；而java栈、本地方法栈和程序计数器是运行时线程私有的内存区域。
一个.class文件装载到内存后会划分为以下五部分：
方法区（method），栈内存（stack），堆内存（heap），本地方法栈（java中的jni调用），程序计数器

   （1.1）Java堆（Heap）
   堆是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，
   几乎所有的通过new创建的对象实例都在这里分配内存。当对象无法在该空间申请到内存时抛出OutOfMemoryEroor异常。同时也是垃圾收集器管理的主要区域。\
   Java的堆内存基于Generation算法（Generational Collector）划分为新生代、年老代和持久代。新生代又被进一步划分为Eden和Survivor区，最后Survivor由FromSpace（Survivor0）和ToSpace（Survivor1）组成。所有通过new创建的对象的内存都在堆中分配，其大小可以通过-Xmx和-Xms来控制。
   分代收集，是基于这样一个事实：不同的对象的生命周期是不一样的。因此，可以将不同生命周期的对象分代，不同的代采取不同的回收算法进行垃圾回收（GC），以便提高回收效率。

   （1.2）方法区（Method Area）
   方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，类的所有字段和方法的字节码，以及一些特殊方法如构造函数，接口代码也在此定义。简单说，所有定义的方法的信息都保存在该区域，静态变量+常量+类信息（构造方法/接口定义）+运行时常量池都存在方法区中

   （1.3）程序计数器（Program Counter Register）
   程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。他是线程私有的。可看做一个指针，指向方法区中的方法字节码（用来存储指向下一跳指令的地址，也即将要执行的指令代码），由执行引擎读取下一条指令，是一个非常小的内存空间，几乎可以忽略不计。
   每个方法在运行时都存储着一个独立的程序计数器，程序计数器是指定程序运行的行数指针。

   （1.4）JVM栈（JVM Stacks）
   与程序计数器一样，Java虚拟机栈（Java Virtual Machine Stacks）也是线程私有的，它的生命周期与线程相同。Java栈描述的是Java方法执行的内存模型：一个线程对应一个栈，每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。不存在垃圾回收问题，只要线程已结束栈就出栈，生命周期与线程一致。
   方法出口指向下次执行的栈帧（方法）

   （1.5）本地方法栈（Native Method Stacks）
   线程私有，可理解为java中jni调用。用于支持native方法执行，存储了每个native方法调用的状态。本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native方法服务。执行引擎通过本地方法接口，利用本地方法库（C语言库）执行。




------------Java虚拟机和Dalvik虚拟机区别-------------------------------------------------------------------------------------
-----java虚拟机运行的是Java字节码，Dalvik虚拟机运行的是Dalvik字节码；传统的Java程序经过编译，生成Java字节码保存在class文件中， -----
-----java虚拟机通过解码class文件中的内容来运行程序。而Dalvik虚拟机运行的是Dalvik字节码，所有的Dalvik字节码由Java字节码转换而来，-----
-----并被打包到一个DEX(Dalvik Executable)可执行文件中Dalvik虚拟机通过解释Dex文件来执行这些字节码。--------------------------------
-----Dalvik可执行文件体积更小。SDK中有一个叫dx的工具负责将java字节码转换为Dalvik字节码。------------------------------------------
-----java虚拟机与Dalvik虚拟机架构不同。java虚拟机基于栈架构。程序在运行时虚拟机需要频繁的从栈上读取或写入数据。----------------------
-----这过程需要更多的指令分派与内存访问次数，会耗费不少CPU时间，对于像手机设备资源有限的设备来说，这是相当大的一笔开销。---------------
-----Dalvik虚拟机基于寄存器架构，数据的访问通过寄存器间直接传递，这样的访问方式比基于栈方式快的多.-----------------------------------
----------------------------------------------------------------------------------------------------------------------------