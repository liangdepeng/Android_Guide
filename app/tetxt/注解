1、定义
Java 注解（Annotation）又称 Java 标注，是 JDK5.0 引入的一种注释机制。
Java 语言中的类、方法、变量、参数和包等都可以被标注。和 Javadoc 不同，Java 标注可以通过反射获取标注内容。
在编译器生成类文件时，标注可以被嵌入到字节码中。Java 虚拟机可以保留标注内容，在运行时可以获取到标注内容 。
当然它也支持自定义 Java 标注。

注解作用：
  1）编译检查
  Annotation 具有"让编译器进行编译检查的作用"。
  例如，@SuppressWarnings, @Deprecated 和 @Override 都具有编译检查作用。
  (01) 关于 @SuppressWarnings 和 @Deprecated，已经在"第3部分"中详细介绍过了。这里就不再举例说明了。
  (02) 若某个方法被 @Override 的标注，则意味着该方法会覆盖父类中的同名方法。如果有方法被 @Override 标示，
  但父类中却没有"被 @Override 标注"的同名方法，则编译器会报错。
  2) 在反射中使用 Annotation
  在反射的 Class, Method, Field 等函数中，有许多于 Annotation 相关的接口。 example：TestJava.class
  3) 根据 Annotation 生成帮助文档
  通过给 Annotation 注解加上 @Documented 标签，能使该 Annotation 标签出现在 javadoc 中。
  4) 能够帮忙查看查看代码
  通过 @Override, @Deprecated 等，我们能很方便的了解程序的大致结构。、

Android APT 技术  简单来说就是在编译期，通过注解生成.java文件
APT(Annotation Processing Tool)即注解处理器，是一种处理注解的工具，确切的说它是javac的一个工具，
它用来在编译时扫描和处理注解。注解处理器以Java代码(或者编译过的字节码)作为输入，生成.java文件作为输出。

使用APT的优点就是方便、简单，可以少写很多重复的代码。
用过ButterKnife、Dagger、EventBus等注解框架的同学就能感受到，利用这些框架可以少些很多代码，只要写一些注解就可以了。
需要新建两个java module
1) 一个自定义注解 @interface
2）一个自定义注解解析器 详情见 CustomProcessor.java 继承 AbstractProcessor 添加注解AutoService
   复写 init()  process()   JavaPoet可以去生成Java文件  以面向对象的思维，生成代码

2、Target(..↓↓↓...) 注解的标记对象类型 可为多个
public enum ElementType {
    TYPE,               /* 类、接口（包括注释类型）或枚举声明  */
    FIELD,              /* 字段声明（包括枚举常量）  */
    METHOD,             /* 方法声明  */
    PARAMETER,          /* 参数声明  */
    CONSTRUCTOR,        /* 构造方法声明  */
    LOCAL_VARIABLE,     /* 局部变量声明  */
    ANNOTATION_TYPE,    /* 注释类型声明  */
    PACKAGE             /* 包声明  */
}

3、Retention(..↓↓↓...) 注解的作用范围 仅1个
public enum RetentionPolicy {
    SOURCE,            /* Annotation信息仅存在于编译器处理期间，编译器处理完之后就没有该Annotation信息了  */
    CLASS,             /* 编译器将Annotation存储于类对应的.class文件中。默认行为  */
    RUNTIME            /* 编译器将Annotation存储于class文件中，并且可由JVM读入 */
}